name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install IO2D
    
      run: |
        sudo apt update
        sudo apt install build-essential
        sudo apt install cmake
        sudo apt install libcairo2-dev
        sudo apt install libgraphicsmagick1-dev
        sudo apt install libpng-dev
        mkdir ~/repo
        cd ~/repo/
        git clone --recurse-submodules https://github.com/cpp-io2d/P0267_RefImpl
        cd P0267_RefImpl
        mkdir Debug
        cd Debug
        cmake ..
        cmake --build .
        sudo make install

#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      
    - name: Build
      working-directory: ${{github.workspace}}
      # Build your program with the given configuration
      run: |
        mkdir build && cd build
        cmake ..
        make

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute my tests.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./test
      
